"""
Django settings for decency project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%_hx1-v-8!f-s32r59b)&yo(1!!0jeh&5xt6ps_hy$*bkiv@9%'


# SECRET_KEY = os.getenv('SECRET_KEY')
# print(SECRET_KEY)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "127.0.0.1",
    # "*",
    "192.168.0.110"
]

# CSRF_COOKIE_HTTPONLY是为了预防CSRF攻击的
CSRF_COOKIE_HTTPONLY = True
# SESSION_COOKIE_SECURE 和 CSRF_COOKIE_SECURE 设置设为 True。 
# 这会指示浏览器仅通过 HTTPS 连接发送这些 cookie。 
# 请注意，这意味着会话将无法通过 HTTP 工作，
# 并且 CSRF 保护将阻止通过 HTTP 接受任何 POST 数据（如果您将所有 HTTP 流量重定向到 HTTPS，这会很好）。
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'http')
# CSRF_TRUSTED_ORIGINS=['http://192.168.0.110:8001',]

#设置参数允许跨站访问
# 指明在跨域访问中，后端是否支持对cookie的操作。
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False

#CORS_ALLOWED_ORIGINS  = [ "http://192.168.0.103", ]
#CORS_ALLOWED_ORIGINS  = [ "http://127.0.0.1:8000" ]


CORS_ALLOW_METHODS = (
 'DELETE',
 'GET',
 'OPTIONS',
 'PATCH',
 'POST',
 'PUT',
 'VIEW',
)

CORS_ALLOW_HEADERS = (
'XMLHttpRequest',  
'X_FILENAME',  
'accept-encoding', 
'authorization',  
'content-type',  
'dnt',
'origin',  
'user-agent',  
'x-csrftoken',  
'x-requested-with',  
'Pragma', 
'X-CSRFToken'

)




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'articles.apps.ArticlesConfig',
    'reading_statistics.apps.ReadingStatisticsConfig',
    'users_managements.apps.UsersManagementsConfig',  # 注册用户单独的管理app，这样可以统一将用户操作的行为，登录登出等放在一起，方便管理
    'comments.apps.CommentsConfig',
    'likes.apps.LikesConfig',
    # 'apis.apps.ApisConfig',
    'ckeditor',  # 注册富文本编辑器 django-ckeditor
    'ckeditor_uploader', # 注册ckeditor上传功能，结合pillow包，处理图片上传的问题
    'rest_framework',    # 实现和管理restful API
    'corsheaders',       # 实现django前后端分离的跨域访问
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 加入django-cors-headers模块的中间件 位置必须在CommonMiddleware上面 不能在其他位置
    'corsheaders.middleware.CorsMiddleware',   # 允许django跨域实现前后端分离  
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # 杜绝CSRF攻击
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'decency.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # context_processors.py这个文件可以定义我们公共的context的键值对，且里面的键值对可以任意被所有文件引用
                # 故我新建一个相同的文件，将登陆页面的键值对放进来，从而可以被公共引用，放在templates文件夹里面，
                'users_managements.context_processors.login_form_model',
            ],
        },
    },
]

WSGI_APPLICATION = 'decency.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),
        'USER':os.getenv('DB_USERNAME'),
        'PASSWORD':os.getenv('DB_PASSWORD'),
        'HOST':os.getenv('DB_HOST'),
        'PORT':os.getenv('DB_PORT'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'   # 简体中文

#   en-us 编码在使用 truncatechars时，可以有 ... 显示，而 zh-Hans编码没有3个点显示
# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
# USE_TZ 关键字是UTC时间（世界统一时间）的开关，我们需要用本地时间，故而需要将其关闭
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
# 静态文件路径
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static_collections')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]

# 配置media 媒体文件路径
MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# 铭感词过滤
SENSTIVE_WORDS_LIB_PATH = os.path.join(BASE_DIR,"static/sensetivewordslibary.txt")


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 配置ckeditor的一些参数
CKEDITOR_UPLOAD_PATH = 'uploads/'

# 用于生成图片缩略图，在编辑器里浏览上传的图片
CKEDITOR_IMAGE_BACKEND='pillow'
 
CKEDITOR_ALLOW_NONIMAGE_FILES = False #不允许非图片文件上传，默认为True
CKEDITOR_BROWSE_SHOW_DIRS = True #在编辑器里浏览上传的图片时，图片会以路径分组，日期排序
CKEDITOR_RESTRICT_BY_USER = False #限制用户浏览图片的权限，只能浏览自己上传的图片，图片会传到以用户名命名的文件夹下，超级管理员依旧可以看所有图片
 
# 在“浏览服务器”页面上显示目录。这样可以按存储图像的目录对图像进行分组，并按日期排序
CKEDITOR_RESTRICT_BY_DATE = True



# 文章评论以及后台文章输入的富文本参数配置
CKEDITOR_CONFIGS = {
    # 默认的富文本编辑器的设置，也就是后台admin编辑文章的富文本输入框的设置
    'default':{
    'uiColor':'#aaff88',
        # 'removePlugins': 'stylesheetparser',
        'allowedContent': True,
        # 'toolbar': (
        #     ['Undo', 'Redo'],
        #     ['Styles', 'Format', 'FontSize'],
        #     ['TextColor', 'BGColor', 'Bold', 'Italic', 'Underline', 'Strike'],
        #     ['Link', 'Unlink', 'Anchor'],
        #     ['Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar'],
        #     ['Source', 'CodeSnippet'],
        # ),
        'toolbar':'full', # 完整工具条
        'resize_enable':True,
        'extraPlugins': ','.join(['codesnippet','uploadimage','widget','lineutils']),  
    },
     
    # 评论区的富文本编辑器的设置
    'comment_ckeditor_config':{
        
        # 'toolbar':'custom',
        # 'toolbar_custom':[
        #     # 富文本里面的功能
        #     ['Bold','Italic','Underline','Strike','Subscript','Superscript'],
        #     ['TextColor','BGColor','RemoveFormat'],
        #     ['NumberedList','BulletedList'],
        #     ['Link','Unlink'],
        #     ['Smiley','SpecialChar','Blockquote'],
        # ],
        # 整体样式配置
        # 'skin': 'moono',
        # 'width':"1094.16px",
        # 'height':"150px",
        # 'tabSpaces':'4',
        # 移除没用的插件功能
        'removePlugins':'elementspath,easyimage,cloudservices,exportpdf,codesnippet,uploadimage,widget,lineutils,Source',  
        'resize_enable':False, # 是否可以改变评论区的大小
    },

}

   
    

# 自定义的一些自变量
NUMBERS_OF_ARTICLES_FOR_EACH_PAGE = 6


#建立数据库缓存表（缓存最好），设置数据库缓存参数
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',  # 执行缓存备份的模块
        'LOCATION': 'my_cache_table',    # 数据库缓存表名称
    }
}




# 邮件发送设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # 邮件发送调用的后台模块，默认可以不写，但是一般默认我们会将其协商
EMAIL_HOST = 'smtp.qq.com'   #发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱
EMAIL_PORT = 465     #发件箱的SMTP服务器端口
EMAIL_HOST_USER = ''    #发送邮件的邮箱地址
# EMAIL_HOST_USER = os.getenv('EMAIL_ADDRESS')   #发送邮件的邮箱地址
# EMAIL_HOST_PASSWORD = ''         #发送邮件的邮箱密码(这里使用的是授权码)
# EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")       #发送邮件的邮箱密码(这里使用的是授权码)

EMAIL_HOST_PASSWORD = ""       #发送邮件的邮箱密码(这里使用的是授权码)，但有时候授权码会失效，记得隔断时间可以维护一下
EMAIL_USE_SSL = True    #是否使用SSL加密，qq企业邮箱要求使用
EMAIL_USE_TLS = False   #是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)
EMAIL_SUBJECT_PREFIX = "[Bertram's World]"  # 邮件信息的前缀名，一般为django，这里面最好覆盖一下



# QQ 登录的一些参数配置
# QQ 的请求授权类型，此值固定为“code”
QQ_RESPONSE_TYPE = 'code'
# 自己申请的QQ的应用的id
# QQ_APPID = os.environ['QQ_APPID']
QQ_APPID = ''
# 自己申请的QQ的应用的key
# QQ_APP_KEY = os.environ['QQ_APP_KEY']
QQ_APP_KEY = ''   
# 自己申请的当用户登录QQ后在自己网站重定向的地址
QQ_REDIRECT_URL = 'http://bertram-world.com/users_managements/login_with_qq'

# 自定义的QQ登陆成功进行验证的状态关键字
QQ_STATE = 'Bertram-World'
# 请求QQ授权的页面链接
QQ_LOGIN_AUTH_PAGE_URL = 'https://graph.qq.com/oauth2.0/authorize'
# 通过Authorization Code获取Access Token 接口
QQ_GET_ACCESS_TOKEN_URL = 'https://graph.qq.com/oauth2.0/token'
# 授权类型，在本步骤中，此值一般为“authorization_code”
QQ_GRANT_TYPE = "authorization_code"
# 获取用户的openid以及相关所需信息的url
QQ_GET_OPENID_URL = 'https://graph.qq.com/oauth2.0/me'
# 获取用户的信息接口
QQ_GET_USER_INFOR_URL = 'https://graph.qq.com/user/get_user_info'
